--- view.py.old	2024-12-13 15:51:53
+++ view.py.new	2024-12-13 15:52:04
@@ -1,25 +1,82 @@
 #! /usr/bin/env python
 # -*- coding: utf-8 -*-
- 
+
 from __future__ import unicode_literals
 import sys
 reload(sys)
 sys.setdefaultencoding('utf8')
- 
+
 import json
- 
+
 def usage():
     print __file__, "old_file diff_json_file [--html] [--txt]"
     sys.exit(-1)
- 
+
+def _fli(i=None, max_len=5):
+    if i is None:
+        return ' '*max_len
+
+    fmt = '%'+str(max_len)+'d'
+    return fmt%(i)
+
+# string with fixed length
+def _fls(txt=None, max_len=63):
+    _txt = txt or ''
+    if len(_txt) < max_len:
+        return _txt + ' '*(max_len-len(_txt))
+    return _txt[0:max_len]
+
+def html_escape(txt):
+    # https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-in-html#7382028
+    return txt\
+        .replace('&', '&amp')\
+        .replace('>', '&gt')\
+        .replace('<', '&lt')\
+        .replace('"', '&quot')\
+        .replace("'", '&#39')
+
+def render(ln_old, s_old, mark, ln_new=None, s_new=None, fli_max_len=5, fls_max_length=63):
+    if option_render_txt:
+        print \
+            _fli(ln_old, max_len=fli_max_len), _fls(s_old, max_len=fls_max_length), \
+            mark, \
+            _fli(ln_new, max_len=fli_max_len), _fls(s_new, max_len=fls_max_length)
+
+    elif option_render_html:
+        if mark == ' ':
+            tr_cls = 'sam'
+        elif mark == '+':
+            tr_cls = 'add'
+        elif mark == '-':
+            tr_cls = 'del'
+        elif mark == '|':
+            tr_cls = 'mod'
+        else:
+            tr_cls = ''
+
+        print "<tr class='%s'><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>"%(
+            tr_cls,
+            _fli(ln_old, max_len=fli_max_len),
+            html_escape(_fls(s_old, max_len=fls_max_length)),
+            mark,
+            _fli(ln_new, max_len=fli_max_len),
+            html_escape(_fls(s_new, max_len=fls_max_length))
+        )
+
+    else:
+        pass
+
+################################################################
+# main
+
 if len(sys.argv) < 2:
     usage()
- 
+
 old_file = None
 diff_json_file = None
 option_render_txt = False
 option_render_html = False
- 
+
 for i in sys.argv[1:]:
     if i.startswith('-'):
         if i == '--html':
@@ -29,46 +86,46 @@
         else:
             pass
         continue
- 
+
     # files
     if old_file is None: # old_file comes first
         old_file = i
     else:
         diff_json_file = i
- 
+
 if old_file is None or diff_json_file is None:
     usage()
- 
+
 if not option_render_txt and not option_render_html:
     option_render_txt = True
- 
+
 # https://en.wikipedia.org/wiki/Diff#Unified_format
 # https://www.gnu.org/software/diffutils/manual/html_node/Detailed-Unified.html
 diff_meta = None
 with open(diff_json_file, "r") as f:
     diff_meta = json.load(f)
- 
+
 ops = diff_meta
- 
+
 f = open(old_file, "r")
- 
+
 l_map = {}
 ln = 0
 for l in f.readlines():
     ln += 1                     # ln starts from 1
- 
+
     l = l.replace('\n', '')
     l_map[ln] = l
 ln_old_total = ln
- 
+
 ln_old_last = 0
 ln_new_last = 0
- 
+
 if option_render_html:
     print """
 <style>
 table {-webkit-border-horizontal-spacing: 0; -webkit-border-vertical-spacing: 0; font-family: monospace; }
-td {border-bottom: solid 1px gray; padding-left: 5px; }
+td {white-space: pre; border-bottom: solid 1px gray; padding-left: 5px; }
 .type-mark {display: none; }
 .mod {background-color: yellow; color: black; }
 .del {background-color: red; color: white;}
@@ -76,129 +133,171 @@
 .add {background-color: green; color: white;}
 </style>
 """
+
+if option_render_html:
     print '<table>'
- 
-def _fli(i=None, max_len=3):
-    if i is None:
-        return ' '*max_len
- 
-    fmt = '%'+str(max_len)+'d'
-    return fmt%(i)
- 
-# string with fixed length
-def _fls(txt=None, max_len=63):
-    _txt = txt or ''
-    if len(_txt) < max_len:
-        return _txt + ' '*(max_len-len(_txt))
-    return _txt[0:max_len]
- 
-def render(ln_old, s_old, mark, ln_new=None, s_new=None, fli_max_len=3, fls_max_length=63):
-    if option_render_txt:
-        print \
-            _fli(ln_old, max_len=fli_max_len), _fls(s_old, max_len=fls_max_length), \
-            mark, \
-            _fli(ln_new, max_len=fli_max_len), _fls(s_new, max_len=fls_max_length)
- 
-    elif option_render_html:
-        if mark == ' ':
-            tr_cls = 'sam'
-        elif mark == '>':
-            tr_cls = 'add'
-        elif mark == '<':
-            tr_cls = 'del'
-        elif mark == '|':
-            tr_cls = 'mod'
+
+    for op in ops:
+        typ, ln_old, ln_new, l = op
+        if typ == 2:
+            print '<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>'%('meta: ln_old:', str(ln_old), 'ln_new:', str(ln_new))
+        elif typ == -1:
+            print '<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>'%(ln_old, '', '-', html_escape(l))
+        elif typ == 0:
+            print '<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>'%(ln_old, ln_new, ' ', html_escape(l))
+        elif typ == 1:
+            print '<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>'%('', ln_new, '+', html_escape(l))
         else:
-            print 'ERROR', 'show never happen'
-            tr_cls = ''
- 
-        print "<tr class='%s'><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>"%(
-            tr_cls,
-            _fli(ln_old, max_len=fli_max_len), _fls(s_old, max_len=fls_max_length),
-            mark,
-            _fli(ln_new, max_len=fli_max_len), _fls(s_new, max_len=fls_max_length)
-        )
- 
-    else:
-        pass
- 
+            pass
+
+    print '</table>'
+    print '<br/>'
+
+if option_render_html:
+    print '<table>'
+
 idx = 0
 total = len(ops)
- 
+
 if total == 0:
     for i in xrange(1, ln_old_total+1):
         l = l_map[i]
         render(i, l, ' ', i, l)
- 
+
     if option_render_html:
         print '</table>'
- 
+
     sys.exit(0)
- 
+
 while idx < total:
- 
     op = ops[idx]
     typ, ln_old, ln_new, l = op
- 
-    if typ == 'M':
- 
+
+    if typ == 2:                # hunk meta line
         # fill up lines missing between hunks
+        n = 0
         for i in xrange(int(ln_old_last+1), int(ln_old)):
+            n += 1
             l = l_map[i]
-            render(ln_old, l, ' ', ln_new, l)
- 
+            render(ln_old_last+n, l, '', ln_new_last + n, l)
+
         idx += 1
         continue
- 
-    # 'L'
- 
+
+    # else, data lines
     if ln_old is not None:
         ln_old_last = ln_old
     if ln_new is not None:
         ln_new_last = ln_new
- 
-    is_flsame = ln_old and ln_new
-    is_minus = not is_flsame and ln_old and not ln_new
-    is_plus = not is_flsame and not ln_old and ln_new
- 
-    if is_minus:
- 
-        if idx+1 == total:      # last one
-            render(ln_old, op[3], '<')
-            break
- 
-        # KEY: probe next op if current is '-' to see if it's '+'
-        next_op = ops[idx+1]
-        next_typ, next_ln_old, next_ln_new, next_l = next_op
- 
-        next_is_flsame = next_ln_old and next_ln_new
-        next_is_minus = not next_is_flsame and next_ln_old and not next_ln_new
-        next_is_plus = not next_is_flsame and not next_ln_old and next_ln_new
- 
-        if next_is_plus:
-            render(ln_old, op[3], '|', ln_new or ln_new_last+1, next_op[3])
-            idx += 2
+
+    if typ == -1:               # minus '-'
+        # consume consequent '-' as much as possible
+        idx2 = idx + 1
+        while idx2 < total and ops[idx2][0] == -1:
+            idx2 += 1
+
+        if idx2 == total:       # idx2 exceeds ops, which means, all from idx is '-'
+            for _op in ops[idx: idx2]:
+                _typ, _lno, _lnn, _l = _op
+
+                if _lno: ln_old_last = _lno
+                if _lnn: ln_new_last = _lnn
+
+                render(_lno, _l, '-')
+
+            # print 'dia: idx2 = %d, total = %d'%(idx2, total)
+            break               # all done, just break main loop
+
+        if ops[idx2][0] == 0:   # idx2 points to first ' ' after bunch of '-'
+            for _op in ops[idx: idx2]:
+                _typ, _lno, _lnn, _l = _op
+
+                if _lno: ln_old_last = _lno
+                if _lnn: ln_new_last = _lnn
+
+                render(_lno, _l, '-')
+
+            # go on to next round
+            idx = idx2
             continue
-        else:
-            render(ln_old, op[3], '<')
-            idx += 1
-            continue
- 
-    if is_plus:
-        render(ln_old, '', '>', ln_new, op[3])
+
+        if ops[idx2][0] == 1:   # idx2 points to first '+' after bunch of '-'
+            # consume consequent '+' as much as possible
+            idx3 = idx2 + 1
+            while idx3 < total and ops[idx3][0] == 1:
+                idx3 += 1
+
+            # either idx3 is last op, or points to ' ', '-',
+            # we all terminate this round
+
+            n_minus = idx2 - idx
+            n_plus = idx3 - idx2
+
+            if n_minus <= n_plus:
+                # cosume both n_minus count of '-' ops and n_minus count of '+' ops
+                for _i in xrange(0, n_minus):
+                    _, _lno_l, _lnn_l, _l_l = ops[idx+_i]
+                    _, _lno_r, _lnn_r, _l_r = ops[idx2+_i]
+
+                    if _lno_l: ln_old_last = _lno_l
+                    if _lnn_r: ln_new_last = _lnn_r
+
+                    render(_lno_l, _l_l, '|', _lnn_r, _l_r)
+
+                for _op in ops[idx2+n_minus:idx3]: # idx3 not cosumned
+                    _typ, _lno, _lnn, _l = _op
+
+                    if _lno: ln_old_last = _lno
+                    if _lnn: ln_new_last = _lnn
+
+                    render(None, '', '+', _lnn, _l)
+
+                # go on to next round
+                idx = idx3
+                continue
+
+            else:               # n_minus > n_plus
+                for _op in ops[idx:idx+n_minus-n_plus]:
+                    _typ, _lno, _lnn, _l = _op
+
+                    if _lno: ln_old_last = _lno
+                    if _lnn: ln_new_last = _lnn
+
+                    render(_lno, _l, '-')
+
+                # cosume both n_plus count of '-' ops and n_minus count of '+' ops
+                _idx = idx+n_minus-n_plus
+                for _i in xrange(0, n_plus):
+                    _, _lno_l, _lnn_l, _l_l = ops[_idx+_i]
+                    _, _lno_r, _lnn_r, _l_r = ops[idx2+_i]
+
+                    if _lno_l: ln_old_last = _lno_l
+                    if _lnn_r: ln_new_last = _lnn_r
+
+                    render(_lno_l, _l_l, '|', _lnn_r, _l_r)
+
+
+                # go on to next round
+                idx = idx3
+                continue
+
+    if typ == 1:                # plus '+'
+        render(ln_old, '', '+', ln_new, op[3])
         idx += 1
         continue
- 
-    if is_flsame:
+
+    if typ == 0:                # space/same ' '
         render(ln_old, op[3], ' ', ln_new, op[3])
         idx += 1
         continue
- 
+
 # padding last parts (not included in hunk) if exists from old file
 if ln_old_last > 0:             # means have been re-assigned by 'L' type meta
+    n = 0
     for i in xrange(ln_old_last+1, ln_old_total+1):
+        n += 1
         l = l_map[i]
-        render(i, l, ' ', i, l)
- 
+        render(i, l, '')
+
 if option_render_html:
     print '</table>'
