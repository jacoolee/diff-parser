[[2, 1, 1, null], [0, 1, 1, "#! /usr/bin/env python"], [0, 2, 2, "# -*- coding: utf-8 -*-"], [-1, 3, null, " "], [1, null, 3, ""], [0, 4, 4, "from __future__ import unicode_literals"], [0, 5, 5, "import sys"], [0, 6, 6, "reload(sys)"], [0, 7, 7, "sys.setdefaultencoding('utf8')"], [-1, 8, null, " "], [1, null, 8, ""], [0, 9, 9, "import json"], [-1, 10, null, " "], [1, null, 10, ""], [0, 11, 11, "def usage():"], [0, 12, 12, "    print __file__, \"old_file diff_json_file [--html] [--txt]\""], [0, 13, 13, "    sys.exit(-1)"], [-1, 14, null, " "], [1, null, 14, ""], [1, null, 15, "def _fli(i=None, max_len=5):"], [1, null, 16, "    if i is None:"], [1, null, 17, "        return ' '*max_len"], [1, null, 18, ""], [1, null, 19, "    fmt = '%'+str(max_len)+'d'"], [1, null, 20, "    return fmt%(i)"], [1, null, 21, ""], [1, null, 22, "# string with fixed length"], [1, null, 23, "def _fls(txt=None, max_len=63):"], [1, null, 24, "    _txt = txt or ''"], [1, null, 25, "    if len(_txt) < max_len:"], [1, null, 26, "        return _txt + ' '*(max_len-len(_txt))"], [1, null, 27, "    return _txt[0:max_len]"], [1, null, 28, ""], [1, null, 29, "def html_escape(txt):"], [1, null, 30, "    # https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-in-html#7382028"], [1, null, 31, "    return txt\\"], [1, null, 32, "        .replace('&', '&amp')\\"], [1, null, 33, "        .replace('>', '&gt')\\"], [1, null, 34, "        .replace('<', '&lt')\\"], [1, null, 35, "        .replace('\"', '&quot')\\"], [1, null, 36, "        .replace(\"'\", '&#39')"], [1, null, 37, ""], [1, null, 38, "def render(ln_old, s_old, mark, ln_new=None, s_new=None, fli_max_len=5, fls_max_length=63):"], [1, null, 39, "    if option_render_txt:"], [1, null, 40, "        print \\"], [1, null, 41, "            _fli(ln_old, max_len=fli_max_len), _fls(s_old, max_len=fls_max_length), \\"], [1, null, 42, "            mark, \\"], [1, null, 43, "            _fli(ln_new, max_len=fli_max_len), _fls(s_new, max_len=fls_max_length)"], [1, null, 44, ""], [1, null, 45, "    elif option_render_html:"], [1, null, 46, "        if mark == ' ':"], [1, null, 47, "            tr_cls = 'sam'"], [1, null, 48, "        elif mark == '+':"], [1, null, 49, "            tr_cls = 'add'"], [1, null, 50, "        elif mark == '-':"], [1, null, 51, "            tr_cls = 'del'"], [1, null, 52, "        elif mark == '|':"], [1, null, 53, "            tr_cls = 'mod'"], [1, null, 54, "        else:"], [1, null, 55, "            tr_cls = ''"], [1, null, 56, ""], [1, null, 57, "        print \"<tr class='%s'><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>\"%("], [1, null, 58, "            tr_cls,"], [1, null, 59, "            _fli(ln_old, max_len=fli_max_len),"], [1, null, 60, "            html_escape(_fls(s_old, max_len=fls_max_length)),"], [1, null, 61, "            mark,"], [1, null, 62, "            _fli(ln_new, max_len=fli_max_len),"], [1, null, 63, "            html_escape(_fls(s_new, max_len=fls_max_length))"], [1, null, 64, "        )"], [1, null, 65, ""], [1, null, 66, "    else:"], [1, null, 67, "        pass"], [1, null, 68, ""], [1, null, 69, "################################################################"], [1, null, 70, "# main"], [1, null, 71, ""], [0, 15, 72, "if len(sys.argv) < 2:"], [0, 16, 73, "    usage()"], [-1, 17, null, " "], [1, null, 74, ""], [0, 18, 75, "old_file = None"], [0, 19, 76, "diff_json_file = None"], [0, 20, 77, "option_render_txt = False"], [0, 21, 78, "option_render_html = False"], [-1, 22, null, " "], [1, null, 79, ""], [0, 23, 80, "for i in sys.argv[1:]:"], [0, 24, 81, "    if i.startswith('-'):"], [0, 25, 82, "        if i == '--html':"], [2, 29, 86, null], [0, 29, 86, "        else:"], [0, 30, 87, "            pass"], [0, 31, 88, "        continue"], [-1, 32, null, " "], [1, null, 89, ""], [0, 33, 90, "    # files"], [0, 34, 91, "    if old_file is None: # old_file comes first"], [0, 35, 92, "        old_file = i"], [0, 36, 93, "    else:"], [0, 37, 94, "        diff_json_file = i"], [-1, 38, null, " "], [1, null, 95, ""], [0, 39, 96, "if old_file is None or diff_json_file is None:"], [0, 40, 97, "    usage()"], [-1, 41, null, " "], [1, null, 98, ""], [0, 42, 99, "if not option_render_txt and not option_render_html:"], [0, 43, 100, "    option_render_txt = True"], [-1, 44, null, " "], [1, null, 101, ""], [0, 45, 102, "# https://en.wikipedia.org/wiki/Diff#Unified_format"], [0, 46, 103, "# https://www.gnu.org/software/diffutils/manual/html_node/Detailed-Unified.html"], [0, 47, 104, "diff_meta = None"], [0, 48, 105, "with open(diff_json_file, \"r\") as f:"], [0, 49, 106, "    diff_meta = json.load(f)"], [-1, 50, null, " "], [1, null, 107, ""], [0, 51, 108, "ops = diff_meta"], [-1, 52, null, " "], [1, null, 109, ""], [0, 53, 110, "f = open(old_file, \"r\")"], [-1, 54, null, " "], [1, null, 111, ""], [0, 55, 112, "l_map = {}"], [0, 56, 113, "ln = 0"], [0, 57, 114, "for l in f.readlines():"], [0, 58, 115, "    ln += 1                     # ln starts from 1"], [-1, 59, null, " "], [1, null, 116, ""], [0, 60, 117, "    l = l.replace('\\n', '')"], [0, 61, 118, "    l_map[ln] = l"], [0, 62, 119, "ln_old_total = ln"], [-1, 63, null, " "], [1, null, 120, ""], [0, 64, 121, "ln_old_last = 0"], [0, 65, 122, "ln_new_last = 0"], [-1, 66, null, " "], [1, null, 123, ""], [0, 67, 124, "if option_render_html:"], [0, 68, 125, "    print \"\"\""], [0, 69, 126, "<style>"], [0, 70, 127, "table {-webkit-border-horizontal-spacing: 0; -webkit-border-vertical-spacing: 0; font-family: monospace; }"], [-1, 71, null, "td {border-bottom: solid 1px gray; padding-left: 5px; }"], [1, null, 128, "td {white-space: pre; border-bottom: solid 1px gray; padding-left: 5px; }"], [0, 72, 129, ".type-mark {display: none; }"], [0, 73, 130, ".mod {background-color: yellow; color: black; }"], [0, 74, 131, ".del {background-color: red; color: white;}"], [2, 76, 133, null], [0, 76, 133, ".add {background-color: green; color: white;}"], [0, 77, 134, "</style>"], [0, 78, 135, "\"\"\""], [1, null, 136, ""], [1, null, 137, "if option_render_html:"], [0, 79, 138, "    print '<table>'"], [-1, 80, null, " "], [-1, 81, null, "def _fli(i=None, max_len=3):"], [-1, 82, null, "    if i is None:"], [-1, 83, null, "        return ' '*max_len"], [-1, 84, null, " "], [-1, 85, null, "    fmt = '%'+str(max_len)+'d'"], [-1, 86, null, "    return fmt%(i)"], [-1, 87, null, " "], [-1, 88, null, "# string with fixed length"], [-1, 89, null, "def _fls(txt=None, max_len=63):"], [-1, 90, null, "    _txt = txt or ''"], [-1, 91, null, "    if len(_txt) < max_len:"], [-1, 92, null, "        return _txt + ' '*(max_len-len(_txt))"], [-1, 93, null, "    return _txt[0:max_len]"], [-1, 94, null, " "], [-1, 95, null, "def render(ln_old, s_old, mark, ln_new=None, s_new=None, fli_max_len=3, fls_max_length=63):"], [-1, 96, null, "    if option_render_txt:"], [-1, 97, null, "        print \\"], [-1, 98, null, "            _fli(ln_old, max_len=fli_max_len), _fls(s_old, max_len=fls_max_length), \\"], [-1, 99, null, "            mark, \\"], [-1, 100, null, "            _fli(ln_new, max_len=fli_max_len), _fls(s_new, max_len=fls_max_length)"], [-1, 101, null, " "], [-1, 102, null, "    elif option_render_html:"], [-1, 103, null, "        if mark == ' ':"], [-1, 104, null, "            tr_cls = 'sam'"], [-1, 105, null, "        elif mark == '>':"], [-1, 106, null, "            tr_cls = 'add'"], [-1, 107, null, "        elif mark == '<':"], [-1, 108, null, "            tr_cls = 'del'"], [-1, 109, null, "        elif mark == '|':"], [-1, 110, null, "            tr_cls = 'mod'"], [1, null, 139, ""], [1, null, 140, "    for op in ops:"], [1, null, 141, "        typ, ln_old, ln_new, l = op"], [1, null, 142, "        if typ == 2:"], [1, null, 143, "            print '<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>'%('meta: ln_old:', str(ln_old), 'ln_new:', str(ln_new))"], [1, null, 144, "        elif typ == -1:"], [1, null, 145, "            print '<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>'%(ln_old, '', '-', html_escape(l))"], [1, null, 146, "        elif typ == 0:"], [1, null, 147, "            print '<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>'%(ln_old, ln_new, ' ', html_escape(l))"], [1, null, 148, "        elif typ == 1:"], [1, null, 149, "            print '<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>'%('', ln_new, '+', html_escape(l))"], [0, 111, 150, "        else:"], [-1, 112, null, "            print 'ERROR', 'show never happen'"], [-1, 113, null, "            tr_cls = ''"], [-1, 114, null, " "], [-1, 115, null, "        print \"<tr class='%s'><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>\"%("], [-1, 116, null, "            tr_cls,"], [-1, 117, null, "            _fli(ln_old, max_len=fli_max_len), _fls(s_old, max_len=fls_max_length),"], [-1, 118, null, "            mark,"], [-1, 119, null, "            _fli(ln_new, max_len=fli_max_len), _fls(s_new, max_len=fls_max_length)"], [-1, 120, null, "        )"], [-1, 121, null, " "], [-1, 122, null, "    else:"], [-1, 123, null, "        pass"], [-1, 124, null, " "], [1, null, 151, "            pass"], [1, null, 152, ""], [1, null, 153, "    print '</table>'"], [1, null, 154, "    print '<br/>'"], [1, null, 155, ""], [1, null, 156, "if option_render_html:"], [1, null, 157, "    print '<table>'"], [1, null, 158, ""], [0, 125, 159, "idx = 0"], [0, 126, 160, "total = len(ops)"], [-1, 127, null, " "], [1, null, 161, ""], [0, 128, 162, "if total == 0:"], [0, 129, 163, "    for i in xrange(1, ln_old_total+1):"], [0, 130, 164, "        l = l_map[i]"], [0, 131, 165, "        render(i, l, ' ', i, l)"], [-1, 132, null, " "], [1, null, 166, ""], [0, 133, 167, "    if option_render_html:"], [0, 134, 168, "        print '</table>'"], [-1, 135, null, " "], [1, null, 169, ""], [0, 136, 170, "    sys.exit(0)"], [-1, 137, null, " "], [1, null, 171, ""], [0, 138, 172, "while idx < total:"], [-1, 139, null, " "], [0, 140, 173, "    op = ops[idx]"], [0, 141, 174, "    typ, ln_old, ln_new, l = op"], [-1, 142, null, " "], [-1, 143, null, "    if typ == 'M':"], [-1, 144, null, " "], [1, null, 175, ""], [1, null, 176, "    if typ == 2:                # hunk meta line"], [0, 145, 177, "        # fill up lines missing between hunks"], [1, null, 178, "        n = 0"], [0, 146, 179, "        for i in xrange(int(ln_old_last+1), int(ln_old)):"], [1, null, 180, "            n += 1"], [0, 147, 181, "            l = l_map[i]"], [-1, 148, null, "            render(ln_old, l, ' ', ln_new, l)"], [-1, 149, null, " "], [1, null, 182, "            render(ln_old_last+n, l, '', ln_new_last + n, l)"], [1, null, 183, ""], [0, 150, 184, "        idx += 1"], [0, 151, 185, "        continue"], [-1, 152, null, " "], [-1, 153, null, "    # 'L'"], [-1, 154, null, " "], [1, null, 186, ""], [1, null, 187, "    # else, data lines"], [0, 155, 188, "    if ln_old is not None:"], [0, 156, 189, "        ln_old_last = ln_old"], [0, 157, 190, "    if ln_new is not None:"], [0, 158, 191, "        ln_new_last = ln_new"], [-1, 159, null, " "], [-1, 160, null, "    is_flsame = ln_old and ln_new"], [-1, 161, null, "    is_minus = not is_flsame and ln_old and not ln_new"], [-1, 162, null, "    is_plus = not is_flsame and not ln_old and ln_new"], [-1, 163, null, " "], [-1, 164, null, "    if is_minus:"], [-1, 165, null, " "], [-1, 166, null, "        if idx+1 == total:      # last one"], [-1, 167, null, "            render(ln_old, op[3], '<')"], [-1, 168, null, "            break"], [-1, 169, null, " "], [-1, 170, null, "        # KEY: probe next op if current is '-' to see if it's '+'"], [-1, 171, null, "        next_op = ops[idx+1]"], [-1, 172, null, "        next_typ, next_ln_old, next_ln_new, next_l = next_op"], [-1, 173, null, " "], [-1, 174, null, "        next_is_flsame = next_ln_old and next_ln_new"], [-1, 175, null, "        next_is_minus = not next_is_flsame and next_ln_old and not next_ln_new"], [-1, 176, null, "        next_is_plus = not next_is_flsame and not next_ln_old and next_ln_new"], [-1, 177, null, " "], [-1, 178, null, "        if next_is_plus:"], [-1, 179, null, "            render(ln_old, op[3], '|', ln_new or ln_new_last+1, next_op[3])"], [-1, 180, null, "            idx += 2"], [1, null, 192, ""], [1, null, 193, "    if typ == -1:               # minus '-'"], [1, null, 194, "        # consume consequent '-' as much as possible"], [1, null, 195, "        idx2 = idx + 1"], [1, null, 196, "        while idx2 < total and ops[idx2][0] == -1:"], [1, null, 197, "            idx2 += 1"], [1, null, 198, ""], [1, null, 199, "        if idx2 == total:       # idx2 exceeds ops, which means, all from idx is '-'"], [1, null, 200, "            for _op in ops[idx: idx2]:"], [1, null, 201, "                _typ, _lno, _lnn, _l = _op"], [1, null, 202, ""], [1, null, 203, "                if _lno: ln_old_last = _lno"], [1, null, 204, "                if _lnn: ln_new_last = _lnn"], [1, null, 205, ""], [1, null, 206, "                render(_lno, _l, '-')"], [1, null, 207, ""], [1, null, 208, "            # print 'dia: idx2 = %d, total = %d'%(idx2, total)"], [1, null, 209, "            break               # all done, just break main loop"], [1, null, 210, ""], [1, null, 211, "        if ops[idx2][0] == 0:   # idx2 points to first ' ' after bunch of '-'"], [1, null, 212, "            for _op in ops[idx: idx2]:"], [1, null, 213, "                _typ, _lno, _lnn, _l = _op"], [1, null, 214, ""], [1, null, 215, "                if _lno: ln_old_last = _lno"], [1, null, 216, "                if _lnn: ln_new_last = _lnn"], [1, null, 217, ""], [1, null, 218, "                render(_lno, _l, '-')"], [1, null, 219, ""], [1, null, 220, "            # go on to next round"], [1, null, 221, "            idx = idx2"], [0, 181, 222, "            continue"], [-1, 182, null, "        else:"], [-1, 183, null, "            render(ln_old, op[3], '<')"], [-1, 184, null, "            idx += 1"], [-1, 185, null, "            continue"], [-1, 186, null, " "], [-1, 187, null, "    if is_plus:"], [-1, 188, null, "        render(ln_old, '', '>', ln_new, op[3])"], [1, null, 223, ""], [1, null, 224, "        if ops[idx2][0] == 1:   # idx2 points to first '+' after bunch of '-'"], [1, null, 225, "            # consume consequent '+' as much as possible"], [1, null, 226, "            idx3 = idx2 + 1"], [1, null, 227, "            while idx3 < total and ops[idx3][0] == 1:"], [1, null, 228, "                idx3 += 1"], [1, null, 229, ""], [1, null, 230, "            # either idx3 is last op, or points to ' ', '-',"], [1, null, 231, "            # we all terminate this round"], [1, null, 232, ""], [1, null, 233, "            n_minus = idx2 - idx"], [1, null, 234, "            n_plus = idx3 - idx2"], [1, null, 235, ""], [1, null, 236, "            if n_minus <= n_plus:"], [1, null, 237, "                # cosume both n_minus count of '-' ops and n_minus count of '+' ops"], [1, null, 238, "                for _i in xrange(0, n_minus):"], [1, null, 239, "                    _, _lno_l, _lnn_l, _l_l = ops[idx+_i]"], [1, null, 240, "                    _, _lno_r, _lnn_r, _l_r = ops[idx2+_i]"], [1, null, 241, ""], [1, null, 242, "                    if _lno_l: ln_old_last = _lno_l"], [1, null, 243, "                    if _lnn_r: ln_new_last = _lnn_r"], [1, null, 244, ""], [1, null, 245, "                    render(_lno_l, _l_l, '|', _lnn_r, _l_r)"], [1, null, 246, ""], [1, null, 247, "                for _op in ops[idx2+n_minus:idx3]: # idx3 not cosumned"], [1, null, 248, "                    _typ, _lno, _lnn, _l = _op"], [1, null, 249, ""], [1, null, 250, "                    if _lno: ln_old_last = _lno"], [1, null, 251, "                    if _lnn: ln_new_last = _lnn"], [1, null, 252, ""], [1, null, 253, "                    render(None, '', '+', _lnn, _l)"], [1, null, 254, ""], [1, null, 255, "                # go on to next round"], [1, null, 256, "                idx = idx3"], [1, null, 257, "                continue"], [1, null, 258, ""], [1, null, 259, "            else:               # n_minus > n_plus"], [1, null, 260, "                for _op in ops[idx:idx+n_minus-n_plus]:"], [1, null, 261, "                    _typ, _lno, _lnn, _l = _op"], [1, null, 262, ""], [1, null, 263, "                    if _lno: ln_old_last = _lno"], [1, null, 264, "                    if _lnn: ln_new_last = _lnn"], [1, null, 265, ""], [1, null, 266, "                    render(_lno, _l, '-')"], [1, null, 267, ""], [1, null, 268, "                # cosume both n_plus count of '-' ops and n_minus count of '+' ops"], [1, null, 269, "                _idx = idx+n_minus-n_plus"], [1, null, 270, "                for _i in xrange(0, n_plus):"], [1, null, 271, "                    _, _lno_l, _lnn_l, _l_l = ops[_idx+_i]"], [1, null, 272, "                    _, _lno_r, _lnn_r, _l_r = ops[idx2+_i]"], [1, null, 273, ""], [1, null, 274, "                    if _lno_l: ln_old_last = _lno_l"], [1, null, 275, "                    if _lnn_r: ln_new_last = _lnn_r"], [1, null, 276, ""], [1, null, 277, "                    render(_lno_l, _l_l, '|', _lnn_r, _l_r)"], [1, null, 278, ""], [1, null, 279, ""], [1, null, 280, "                # go on to next round"], [1, null, 281, "                idx = idx3"], [1, null, 282, "                continue"], [1, null, 283, ""], [1, null, 284, "    if typ == 1:                # plus '+'"], [1, null, 285, "        render(ln_old, '', '+', ln_new, op[3])"], [0, 189, 286, "        idx += 1"], [0, 190, 287, "        continue"], [-1, 191, null, " "], [-1, 192, null, "    if is_flsame:"], [1, null, 288, ""], [1, null, 289, "    if typ == 0:                # space/same ' '"], [0, 193, 290, "        render(ln_old, op[3], ' ', ln_new, op[3])"], [0, 194, 291, "        idx += 1"], [0, 195, 292, "        continue"], [-1, 196, null, " "], [1, null, 293, ""], [0, 197, 294, "# padding last parts (not included in hunk) if exists from old file"], [0, 198, 295, "if ln_old_last > 0:             # means have been re-assigned by 'L' type meta"], [1, null, 296, "    n = 0"], [0, 199, 297, "    for i in xrange(ln_old_last+1, ln_old_total+1):"], [1, null, 298, "        n += 1"], [0, 200, 299, "        l = l_map[i]"], [-1, 201, null, "        render(i, l, ' ', i, l)"], [-1, 202, null, " "], [1, null, 300, "        render(i, l, '')"], [1, null, 301, ""], [0, 203, 302, "if option_render_html:"], [0, 204, 303, "    print '</table>'"]]